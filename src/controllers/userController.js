const userService = require("../services/userService");
const Joi = require("joi");

// userSchema is used to validate the request body
const userSchema = Joi.object({
  id: Joi.string().optional(), // This will be generated by the database
  email: Joi.string().email().required(),
  name: Joi.string().required(),
  age: Joi.number().integer().min(0).required(),
  city: Joi.string().required(),
  zipCode: Joi.string().pattern(new RegExp("^[0-9]{6}$")).required(),
});

// idSchema is used to validate the request parameter
const idSchema = Joi.string().regex(/^[0-9a-fA-F]{24}$/).required();

// createUser is used to create a new user
exports.createUser = async (req, res) => {
  const { error } = userSchema.validate(req.body);
  if (error) return res.status(400).send(error.details[0].message);

  try {
    const user = await userService.createUser(req.body);
    res.status(201).json(user);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// getAllUsers is used to get all users
exports.getAllUsers = async (req, res) => {
  try {
    const users = await userService.getAllUsers();
    res.status(200).json(users);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// getUserById is used to get a user by id
exports.getUserById = async (req, res) => {
  const { error } = idSchema.validate(req.params.userId);
  if (error) return res.status(400).send(error.details[0].message);

  try {
    const user = await userService.getUserById(req.params.userId);
    if (!user) return res.status(404).json({ message: "User not found" });
    res.status(200).json(user);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// updateUser is used to update a user
exports.updateUser = async (req, res) => {
  const { error: idError } = idSchema.validate(req.params.userId);
  if (idError) return res.status(400).send(idError.details[0].message);

  const { error: bodyError } = userSchema.validate(req.body);
  if (bodyError) return res.status(400).send(bodyError.details[0].message);

  try {
    const user = await userService.updateUser(req.params.userId, req.body);
    if (!user) return res.status(404).json({ message: "User not found" });
    res.status(200).json(user);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// deleteUser is used to delete a user
exports.deleteUser = async (req, res) => {
  const { error } = idSchema.validate(req.params.userId);
  if (error) return res.status(400).send(error.details[0].message);

  try {
    const user = await userService.deleteUser(req.params.userId);
    if (!user) return res.status(404).json({ message: "User not found" });
    res.status(200).json({ message: "User deleted successfully" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};
